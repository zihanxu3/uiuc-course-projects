$date
	Sat Mar 21 15:08:15 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module timer_test $end
$var wire 32 ! cycle [31:0] $end
$var wire 1 " TimerInterrupt $end
$var wire 1 # TimerAddress $end
$var reg 1 $ MemRead $end
$var reg 1 % MemWrite $end
$var reg 32 & address [31:0] $end
$var reg 1 ' clock $end
$var reg 32 ( data [31:0] $end
$var reg 1 ) reset $end
$scope module t $end
$var wire 1 $ MemRead $end
$var wire 1 % MemWrite $end
$var wire 1 # TimerAddress $end
$var wire 1 * acknowledge $end
$var wire 32 + address [31:0] $end
$var wire 1 ' clock $end
$var wire 32 , data [31:0] $end
$var wire 1 ) reset $end
$var wire 1 - timer_read $end
$var wire 1 . timer_write $end
$var wire 1 / second_eq $end
$var wire 32 0 inter_q [31:0] $end
$var wire 1 1 first_eq $end
$var wire 32 2 cycle_q [31:0] $end
$var wire 32 3 cycle_d [31:0] $end
$var wire 32 4 cycle [31:0] $end
$var wire 1 " TimerInterrupt $end
$scope module a $end
$var wire 3 5 control [2:0] $end
$var wire 32 6 inB [31:0] $end
$var wire 32 7 out [31:0] $end
$var wire 1 8 zero $end
$var wire 1 9 negative $end
$var wire 32 : inA [31:0] $end
$upscope $end
$scope module cycle_counter $end
$var wire 1 ' clk $end
$var wire 32 ; d [31:0] $end
$var wire 1 < enable $end
$var wire 1 ) reset $end
$var reg 32 = q [31:0] $end
$upscope $end
$scope module interr_cycle $end
$var wire 1 ' clk $end
$var wire 32 > d [31:0] $end
$var wire 1 . enable $end
$var wire 1 ) reset $end
$var reg 32 ? q [31:0] $end
$upscope $end
$scope module interr_line $end
$var wire 1 ' clk $end
$var wire 1 @ d $end
$var wire 1 A enable $end
$var wire 1 B reset $end
$var reg 1 " q $end
$upscope $end
$scope module tr_1 $end
$var wire 1 - control $end
$var wire 32 C d [31:0] $end
$var wire 32 D o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bz D
bx C
1B
xA
1@
bx ?
b0 >
bx =
1<
bx ;
bx :
x9
x8
bx 7
b1 6
b0 5
bz 4
bx 3
bx 2
01
bx 0
0/
0.
0-
b0 ,
b0 +
0*
1)
b0 (
0'
b0 &
0%
0$
0#
x"
bz !
$end
#5
09
08
b1 3
b1 7
b1 ;
0A
b11111111111111111111111111111111 0
b11111111111111111111111111111111 ?
b0 2
b0 :
b0 =
b0 C
0"
1'
#10
b0 !
b0 4
b0 D
1-
1#
0B
0'
1$
11
b11111111111111110000000000011100 &
b11111111111111110000000000011100 +
0)
#15
b10 3
b10 7
b10 ;
b1 !
b1 4
b1 D
b1 2
b1 :
b1 =
b1 C
1'
#20
0'
#25
b11 3
b11 7
b11 ;
b10 !
b10 4
b10 D
b10 2
b10 :
b10 =
b10 C
1'
#30
0'
#35
b100 3
b100 7
b100 ;
b11 !
b11 4
b11 D
b11 2
b11 :
b11 =
b11 C
1'
#40
0'
#45
b101 3
b101 7
b101 ;
b100 !
b100 4
b100 D
b100 2
b100 :
b100 =
b100 C
1'
#50
bz !
bz 4
bz D
1.
0-
0'
1%
0$
b110 (
b110 ,
b110 >
#55
b110 3
b110 7
b110 ;
b101 2
b101 :
b101 =
b101 C
b110 0
b110 ?
1'
#60
b101 !
b101 4
b101 D
0.
1-
0'
0%
1$
#65
b111 3
b111 7
b111 ;
b110 !
b110 4
b110 D
1A
b110 2
b110 :
b110 =
b110 C
1'
#70
0'
#75
b1000 3
b1000 7
b1000 ;
b111 !
b111 4
b111 D
1"
0A
b111 2
b111 :
b111 =
b111 C
1'
#80
0'
#85
b1001 3
b1001 7
b1001 ;
b1000 !
b1000 4
b1000 D
b1000 2
b1000 :
b1000 =
b1000 C
1'
#90
0'
#95
b1010 3
b1010 7
b1010 ;
b1001 !
b1001 4
b1001 D
b1001 2
b1001 :
b1001 =
b1001 C
1'
#100
bz !
bz 4
bz D
1B
0-
1*
0'
1%
0$
01
1/
b11111111111111110000000001101100 &
b11111111111111110000000001101100 +
#105
b1011 3
b1011 7
b1011 ;
b1010 2
b1010 :
b1010 =
b1010 C
0"
1'
#110
0'
